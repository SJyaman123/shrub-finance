/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ShrubExchangeInterface extends ethers.utils.Interface {
  functions: {
    "COMMON_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "EIP712_DOMAIN()": FunctionFragment;
    "EIP712_DOMAIN_TYPEHASH()": FunctionFragment;
    "ORDER_TYPEHASH()": FunctionFragment;
    "SALT()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "execute(tuple,tuple,address,tuple)": FunctionFragment;
    "getAddressFromSignedOrder(tuple,tuple,tuple)": FunctionFragment;
    "getAvailableBalance(address,address)": FunctionFragment;
    "getCurrentNonce(address,address,address)": FunctionFragment;
    "hashOrder(tuple)": FunctionFragment;
    "hashOrderCommon(tuple)": FunctionFragment;
    "hashSmallOrder(tuple,tuple)": FunctionFragment;
    "matchOrder(tuple,tuple,tuple,tuple,tuple)": FunctionFragment;
    "userOptionPosition(address,bytes32)": FunctionFragment;
    "userPairNonce(address,address,address)": FunctionFragment;
    "userTokenBalances(address,address)": FunctionFragment;
    "userTokenLockedBalance(address,address)": FunctionFragment;
    "validateSignature(address,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COMMON_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SALT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      string,
      { v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressFromSignedOrder",
    values: [
      {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      { v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentNonce",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [
      {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrderCommon",
    values: [
      {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashSmallOrder",
    values: [
      {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrder",
    values: [
      {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      { v: BigNumberish; r: BytesLike; s: BytesLike },
      { v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userOptionPosition",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPairNonce",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokenBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokenLockedBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSignature",
    values: [string, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMON_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SALT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressFromSignedOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashOrderCommon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashSmallOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matchOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userOptionPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPairNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTokenLockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,address,uint256)": EventFragment;
    "OrderMatched(address,address,tuple,tuple,tuple)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderMatched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class ShrubExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ShrubExchangeInterface;

  functions: {
    COMMON_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<[string]>;

    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    ORDER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    SALT(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      buyOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      seller: string,
      buySig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAddressFromSignedOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      sig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAvailableBalance(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentNonce(
      user: string,
      quoteAsset: string,
      baseAsset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashOrderCommon(
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashSmallOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    matchOrder(
      sellOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      buyOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      sellSig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      buySig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userOptionPosition(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userPairNonce(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userTokenLockedBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validateSignature(
      user: string,
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  COMMON_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  EIP712_DOMAIN(overrides?: CallOverrides): Promise<string>;

  EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  SALT(overrides?: CallOverrides): Promise<string>;

  deposit(
    token: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    buyOrder: {
      size: BigNumberish;
      isBuy: boolean;
      nonce: BigNumberish;
      price: BigNumberish;
      offerExpire: BigNumberish;
      fee: BigNumberish;
    },
    common: {
      baseAsset: string;
      quoteAsset: string;
      expiry: BigNumberish;
      strike: BigNumberish;
      optionType: BigNumberish;
    },
    seller: string,
    buySig: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAddressFromSignedOrder(
    order: {
      size: BigNumberish;
      isBuy: boolean;
      nonce: BigNumberish;
      price: BigNumberish;
      offerExpire: BigNumberish;
      fee: BigNumberish;
    },
    common: {
      baseAsset: string;
      quoteAsset: string;
      expiry: BigNumberish;
      strike: BigNumberish;
      optionType: BigNumberish;
    },
    sig: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: CallOverrides
  ): Promise<string>;

  getAvailableBalance(
    user: string,
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentNonce(
    user: string,
    quoteAsset: string,
    baseAsset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashOrder(
    order: {
      size: BigNumberish;
      isBuy: boolean;
      nonce: BigNumberish;
      price: BigNumberish;
      offerExpire: BigNumberish;
      fee: BigNumberish;
      baseAsset: string;
      quoteAsset: string;
      expiry: BigNumberish;
      strike: BigNumberish;
      optionType: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  hashOrderCommon(
    common: {
      baseAsset: string;
      quoteAsset: string;
      expiry: BigNumberish;
      strike: BigNumberish;
      optionType: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  hashSmallOrder(
    order: {
      size: BigNumberish;
      isBuy: boolean;
      nonce: BigNumberish;
      price: BigNumberish;
      offerExpire: BigNumberish;
      fee: BigNumberish;
    },
    common: {
      baseAsset: string;
      quoteAsset: string;
      expiry: BigNumberish;
      strike: BigNumberish;
      optionType: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  matchOrder(
    sellOrder: {
      size: BigNumberish;
      isBuy: boolean;
      nonce: BigNumberish;
      price: BigNumberish;
      offerExpire: BigNumberish;
      fee: BigNumberish;
    },
    buyOrder: {
      size: BigNumberish;
      isBuy: boolean;
      nonce: BigNumberish;
      price: BigNumberish;
      offerExpire: BigNumberish;
      fee: BigNumberish;
    },
    common: {
      baseAsset: string;
      quoteAsset: string;
      expiry: BigNumberish;
      strike: BigNumberish;
      optionType: BigNumberish;
    },
    sellSig: { v: BigNumberish; r: BytesLike; s: BytesLike },
    buySig: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userOptionPosition(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userPairNonce(
    arg0: string,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userTokenBalances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userTokenLockedBalance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validateSignature(
    user: string,
    hash: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COMMON_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<string>;

    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    SALT(overrides?: CallOverrides): Promise<string>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      buyOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      seller: string,
      buySig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressFromSignedOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      sig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<string>;

    getAvailableBalance(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentNonce(
      user: string,
      quoteAsset: string,
      baseAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    hashOrderCommon(
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    hashSmallOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    matchOrder(
      sellOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      buyOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      sellSig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      buySig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    userOptionPosition(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPairNonce(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTokenLockedBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateSignature(
      user: string,
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; amount: BigNumber }
    >;

    OrderMatched(
      seller?: null,
      buyer?: null,
      sellOrder?: null,
      buyOrder?: null,
      common?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
          size: BigNumber;
          isBuy: boolean;
          nonce: BigNumber;
          price: BigNumber;
          offerExpire: BigNumber;
          fee: BigNumber;
        },
        [BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
          size: BigNumber;
          isBuy: boolean;
          nonce: BigNumber;
          price: BigNumber;
          offerExpire: BigNumber;
          fee: BigNumber;
        },
        [string, string, BigNumber, BigNumber, number] & {
          baseAsset: string;
          quoteAsset: string;
          expiry: BigNumber;
          strike: BigNumber;
          optionType: number;
        }
      ],
      {
        seller: string;
        buyer: string;
        sellOrder: [
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          size: BigNumber;
          isBuy: boolean;
          nonce: BigNumber;
          price: BigNumber;
          offerExpire: BigNumber;
          fee: BigNumber;
        };
        buyOrder: [
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          size: BigNumber;
          isBuy: boolean;
          nonce: BigNumber;
          price: BigNumber;
          offerExpire: BigNumber;
          fee: BigNumber;
        };
        common: [string, string, BigNumber, BigNumber, number] & {
          baseAsset: string;
          quoteAsset: string;
          expiry: BigNumber;
          strike: BigNumber;
          optionType: number;
        };
      }
    >;

    Withdraw(
      user?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    COMMON_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    SALT(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      buyOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      seller: string,
      buySig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAddressFromSignedOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      sig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableBalance(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentNonce(
      user: string,
      quoteAsset: string,
      baseAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOrderCommon(
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashSmallOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchOrder(
      sellOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      buyOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      sellSig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      buySig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userOptionPosition(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPairNonce(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTokenLockedBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateSignature(
      user: string,
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COMMON_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP712_DOMAIN_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ORDER_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SALT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      buyOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      seller: string,
      buySig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAddressFromSignedOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      sig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableBalance(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentNonce(
      user: string,
      quoteAsset: string,
      baseAsset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOrderCommon(
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashSmallOrder(
      order: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchOrder(
      sellOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      buyOrder: {
        size: BigNumberish;
        isBuy: boolean;
        nonce: BigNumberish;
        price: BigNumberish;
        offerExpire: BigNumberish;
        fee: BigNumberish;
      },
      common: {
        baseAsset: string;
        quoteAsset: string;
        expiry: BigNumberish;
        strike: BigNumberish;
        optionType: BigNumberish;
      },
      sellSig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      buySig: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userOptionPosition(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPairNonce(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTokenLockedBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateSignature(
      user: string,
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
