/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  user: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type OrderMatched = ContractEventLog<{
  seller: string;
  buyer: string;
  sellOrder: [string, boolean, string, string, string, string];
  buyOrder: [string, boolean, string, string, string, string];
  common: [string, string, string, string, string];
  0: string;
  1: string;
  2: [string, boolean, string, string, string, string];
  3: [string, boolean, string, string, string, string];
  4: [string, string, string, string, string];
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface ShrubExchange extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ShrubExchange;
  clone(): ShrubExchange;
  methods: {
    COMMON_TYPEHASH(): NonPayableTransactionObject<string>;

    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    EIP712_DOMAIN(): NonPayableTransactionObject<string>;

    EIP712_DOMAIN_TYPEHASH(): NonPayableTransactionObject<string>;

    ORDER_TYPEHASH(): NonPayableTransactionObject<string>;

    SALT(): NonPayableTransactionObject<string>;

    userOptionPosition(
      arg0: string,
      arg1: string | number[]
    ): NonPayableTransactionObject<string>;

    userPairNonce(
      arg0: string,
      arg1: string,
      arg2: string
    ): NonPayableTransactionObject<string>;

    userTokenBalances(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    userTokenLockedBalance(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    hashOrder(
      order: [
        number | string | BN,
        boolean,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    hashSmallOrder(
      order: [
        number | string | BN,
        boolean,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      common: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    hashOrderCommon(
      common: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    getCurrentNonce(
      user: string,
      quoteAsset: string,
      baseAsset: string
    ): NonPayableTransactionObject<string>;

    getAvailableBalance(
      user: string,
      asset: string
    ): NonPayableTransactionObject<string>;

    validateSignature(
      user: string,
      hash: string | number[],
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<boolean>;

    getAddressFromSignedOrder(
      order: [
        number | string | BN,
        boolean,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      common: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      sig: [number | string | BN, string | number[], string | number[]]
    ): NonPayableTransactionObject<string>;

    deposit(
      token: string,
      amount: number | string | BN
    ): PayableTransactionObject<void>;

    withdraw(
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    matchOrder(
      sellOrder: [
        number | string | BN,
        boolean,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      buyOrder: [
        number | string | BN,
        boolean,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      common: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      sellSig: [number | string | BN, string | number[], string | number[]],
      buySig: [number | string | BN, string | number[], string | number[]]
    ): NonPayableTransactionObject<void>;

    execute(
      buyOrder: [
        number | string | BN,
        boolean,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      common: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      seller: string,
      buySig: [number | string | BN, string | number[], string | number[]]
    ): PayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    OrderMatched(cb?: Callback<OrderMatched>): EventEmitter;
    OrderMatched(
      options?: EventOptions,
      cb?: Callback<OrderMatched>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "OrderMatched", cb: Callback<OrderMatched>): void;
  once(
    event: "OrderMatched",
    options: EventOptions,
    cb: Callback<OrderMatched>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
